/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/protected/wallets/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all token balances for wallet
         * @description Retrieve all token balances in TokenBalanceDto objects for a given wallet address
         */
        get: operations["getWalletBalances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/tradeExecutions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all trade executions
         * @description Retrieve all trading executions
         */
        get: operations["getTradeExecutions"];
        put?: never;
        /**
         * create a new trade execution
         * @description create a trade execution
         */
        post: operations["createTradeExecution"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/tradeExecutions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update a trade execution
         * @description endpoint that can be used to update / cancel trade executions
         */
        put: operations["updateTradeExecution"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/tradeConfirmations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all trade confirmations
         * @description Retrieve all trade confirmations
         */
        get: operations["getTradeConfirmations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/tradeErrors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all trade erros
         * @description Retrieve all trade errors
         */
        get: operations["getTradeErrors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * quote a trade execution
         * @description quote a trade execution
         */
        post: operations["quoteTradeExecution"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected/tradeExecutions/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current USD prices for trade executions
         * @description Returns a map of chainType to a map of lowercase token address to current USD price for the current set of trade executions.
         */
        get: operations["getTradeExecutionPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            /** @description Indicates if the request was successful */
            success: boolean;
        };
        ErrorResponse: components["schemas"]["ApiResponse"] & {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @description Error code for programmatic handling */
                code: string;
                /** @description Human-readable error message */
                message: string;
                /** @description Additional error details */
                details?: Record<string, never>;
            };
        };
        WalletBalancesDto: {
            /** @description The address of the wallet */
            walletAddress?: string;
            /** @description The list of all the tokens owned by the address */
            tokenBalanceList: components["schemas"]["TokenBalanceDto"][];
        };
        TokenBalanceDto: {
            /** @description the address of the token */
            address?: string;
            /** @description the name of the token */
            name?: string;
            /** @description the symbol of the token */
            symbol?: string;
            /**
             * Format: double
             * @description the formatted amount of tokens owned
             */
            amountOwned?: number;
            /** @description boolean value that indicates if this token has a permit2 approval for the user */
            permit2Approved?: boolean;
        };
        TradeSetupDto: {
            /** @description The address of the wallet to trade with */
            walletAddress?: string;
            /** @description Input token address */
            inputTokenAddress: string;
            /** @description Input token name */
            inputTokenName: string;
            /**
             * @description Blockchain network for the trade
             * @enum {string}
             */
            chainType: "ETH" | "BASE" | "ARB";
            /** @description formatted amount of tokens owned */
            amountOwned: string;
            /** @description current usd price */
            usdPrice: string;
        };
        TradeExecutionDto: {
            /**
             * Format: double
             * @description The ID of the Trade Execution
             */
            id: number;
            /**
             * @description The status of the Trade Execution
             * @enum {string}
             */
            status: "PENDING" | "CANCELED" | "EXECUTING" | "CONFIRMED" | "FAILED";
            /**
             * @description Blockchain network for the trade
             * @enum {string}
             */
            chainType: "ETH" | "BASE" | "ARB";
            /** @description Address of the input token */
            inputTokenAddress: string;
            /** @description Name of the input token */
            inputTokenName: string;
            /** @description Amount of input token */
            inputAmount: string;
            /** @description Output token */
            outputToken: string;
            /** @description Output token address */
            outputTokenAddress: string;
            /** @description Whether this is a limit order */
            isLimitOrder: boolean;
            /** @description Whether this is a stop loss order */
            isStopLossOrder: boolean;
            /**
             * Format: double
             * @description Price for limit orders (required if isLimitOrder OR is isStopLossOrder is true)
             */
            tradingPrice?: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        TradeConfirmationDto: {
            /**
             * Format: double
             * @description The ID of the Trade Confirmation
             */
            id: number;
            /**
             * Format: double
             * @description The ID of the Trade execution
             */
            tradeExecutionId: number;
            /** @description The name of the protocol used to trade */
            strategy: string;
            /** @description The route used for the trade */
            route: string;
            /** @description The transaction hash of the trade */
            transactionHash: string;
            /** @description The block in which the transaction was confirmed */
            confirmedBlock: number;
            /** @description The gas cost of the transaction(s) */
            gasCost: string;
            /** @description The ETH usd price snapshot on the protocol that executed during execution */
            ethPriceUsd: string;
            /** @description The token usd price snapshot on coingecko (GeckoTerminal API) during execution */
            tokenPriceUsd: string;
            /** @description The formatted amount of tokens spent */
            tokensSpent: string;
            /** @description The formatted amount of ETH received */
            ethReceived: string;
            /** @description The formatted amount of tokens received */
            tokensReceived: string;
            /**
             * Format: date-time
             * @description The timestamp when the trade confirmation was created
             */
            createdAt: string;
        };
        TradeErrorDto: {
            /**
             * Format: double
             * @description The ID of the Trade Error
             */
            id: number;
            /**
             * Format: double
             * @description The ID
             */
            tradeExecutionId: number;
            /** @description The reason why the trade failed */
            reason: string;
            /** @description The address to which the transaction was send */
            transactionTo?: string;
            /** @description The raw transaction data */
            transactionData: string;
            /**
             * Format: date-time
             * @description The timestamp when the trade error was created
             */
            createdAt: string;
        };
        QuoteDto: {
            /** @description Name of the protocol that's being used to trade */
            strategy: string;
            /** @description Estimated tokens received in request output token */
            estimatedOutputTokensReceived: string;
        };
        /** @description Map keyed by chainType (e.g. ETH, BASE, ARB) to a token price map. For each chain, maps lowercase token address to its USD price. */
        TradeExecutionsPricesDto: {
            [key: string]: {
                [key: string]: number;
            };
        };
        CreateTradeExecutionRequest: {
            /**
             * @description Blockchain network for the trade
             * @enum {string}
             */
            chainType: "ETH" | "BASE" | "ARB";
            /**
             * Format: double
             * @description The wallet to trade with
             */
            walletId?: number;
            /** @description Input token address */
            inputToken: string;
            /** @description Amount of input token */
            inputAmount: string;
            /** @description Output token address or symbol */
            outputToken: string;
            /** @description Whether this is a limit order */
            isLimitOrder: boolean;
            /** @description Whether this is a stop loss order */
            isStopLossOrder: boolean;
            /**
             * Format: double
             * @description Price for limit orders and stop loss orders (required if either isLimitOrder or isStopLoss is true)
             */
            tradingPrice?: number;
        };
    };
    responses: {
        /** @description Incorrect input */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"] & {
                    error?: {
                        /** @enum {string} */
                        code?: "VALIDATION_ERROR";
                        /** @example Request body doesn't match input type */
                        message?: string;
                    };
                };
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"] & {
                    error?: {
                        /** @enum {string} */
                        code?: "NOT_FOUND";
                        /** @example Wallet not found */
                        message?: string;
                    };
                };
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"] & {
                    error?: {
                        /** @enum {string} */
                        code?: "INTERNAL_ERROR";
                        /** @example Internal server error */
                        message?: string;
                    };
                };
            };
        };
        /** @description User not authorized */
        NotAuthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"] & {
                    error?: {
                        /** @enum {string} */
                        code?: "NOT_AUTHORIZED";
                        /** @example User not authorized */
                        message?: string;
                    };
                };
            };
        };
        /** @description Forbidden */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"] & {
                    error?: {
                        /** @enum {string} */
                        code?: "FORBIDDEN";
                        /** @example Forbidden */
                        message?: string;
                    };
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getWalletBalances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The address of the wallet for which to retrieve the token balance list */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wallet token balances retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Wallets retrieved successfully */
                            message: string;
                            walletBalances: components["schemas"]["WalletBalancesDto"][];
                        };
                    };
                };
            };
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTradeExecutions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trade executions retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Trade executions retrieved successfully */
                            message: string;
                            tradeExecutions: components["schemas"]["TradeExecutionDto"][];
                        };
                    };
                };
            };
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTradeExecution: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @description Trade Execution Request */
                "application/json": components["schemas"]["CreateTradeExecutionRequest"];
            };
        };
        responses: {
            /** @description Trade Execution successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Trade Execution successfully created */
                            message: string;
                            tradeExecution: components["schemas"]["TradeExecutionDto"];
                        };
                    };
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTradeExecution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the trade execution to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description trade updated successfully, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["NotAuthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTradeConfirmations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trade confirmations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Trade executions retrieved successfully */
                            message: string;
                            tradeConfirmations: components["schemas"]["TradeConfirmationDto"][];
                        };
                    };
                };
            };
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTradeErrors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trade errors retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Trade errors retrieved successfully */
                            message: string;
                            tradeErrors: components["schemas"]["TradeErrorDto"][];
                        };
                    };
                };
            };
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    quoteTradeExecution: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @description Trade Execution Request */
                "application/json": components["schemas"]["CreateTradeExecutionRequest"];
            };
        };
        responses: {
            /** @description Trade Execution successfully quoted */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Trade Execution successfully quoted */
                            message: string;
                            quote: components["schemas"]["QuoteDto"];
                        };
                    };
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTradeExecutionPrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prices retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"] & {
                        data: {
                            /** @example Prices retrieved successfully */
                            message: string;
                            prices: components["schemas"]["TradeExecutionsPricesDto"];
                        };
                    };
                };
            };
            401: components["responses"]["NotAuthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
